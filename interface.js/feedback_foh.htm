<html>
<head>
  <script src='interface.js'></script>
</head>
<body>
  <script>

    var fader_top = 0.4;
    fader_top_master = 0.25;

    var panel = new Interface.Panel({ useRelativeSizesAndPositions: true });

    var f1 = new Interface.Slider({
      bounds:[0,fader_top,0.07,1 - fader_top],
      onvaluechange: function() {
        Interface.OSC.send( '/speaker', 'if', ['1', this.value] )
      },
      // value:0.905,
      target:null
    })

    var f2 = new Interface.Slider({
      bounds:[0.11,fader_top,0.07,1 - fader_top],
      onvaluechange: function() {
        Interface.OSC.send( '/speaker', 'if', ['2', this.value] )
      },
      // value:0.905,
      target:null
    })

    var f3 = new Interface.Slider({
      bounds:[0.22,fader_top,0.07,1 - fader_top],
      onvaluechange: function() {
        Interface.OSC.send( '/speaker', 'if', ['3', this.value] )
      },
      // value:0.905,
      target:null
    })

    var f4 = new Interface.Slider({
      bounds:[0.33,fader_top,0.07,1 - fader_top],
      onvaluechange: function() {
        Interface.OSC.send( '/speaker', 'if', ['4', this.value] )
      },
      // value:0.905,
      target:null
    })

    var f5 = new Interface.Slider({
      bounds:[0.44,fader_top,0.07,1 - fader_top],
      onvaluechange: function() {
        Interface.OSC.send( '/speaker', 'if', ['5', this.value] )
      },
      // value:0.905,
      target:null
    })

    var f6 = new Interface.Slider({
      bounds:[0.55,fader_top,0.07,1 - fader_top],
      onvaluechange: function() {
        Interface.OSC.send( '/speaker', 'if', ['6', this.value] )
      },
      // value:0.905,
      target:null
    })

    // Pre-fader 'say' level meters

    var l1 = new Interface.Slider({
      min:"-80", max:"18", name:'say_1', fill:'green', bounds:[f1.x + f1.width,fader_top,0.02,1 - fader_top]
    })

    var l2 = new Interface.Slider({
      min:"-80", max:"18", name:'say_2', fill:'green', bounds:[f2.x + f2.width,fader_top,0.02,1 - fader_top]
    })

    var l3 = new Interface.Slider({
      min:"-80", max:"18", name:'say_3', fill:'green', bounds:[f3.x + f3.width,fader_top,0.02,1 - fader_top]
    })

    var l4 = new Interface.Slider({
      min:"-80", max:"18", name:'say_4', fill:'green', bounds:[f4.x + f4.width,fader_top,0.02,1 - fader_top]
    })

    var l5 = new Interface.Slider({
      min:"-80", max:"18", name:'say_5', fill:'green', bounds:[f5.x + f5.width,fader_top,0.02,1 - fader_top]
    })

    var l6 = new Interface.Slider({
      min:"-80", max:"18", name:'say_6', fill:'green', bounds:[f6.x + f6.width,fader_top,0.02,1 - fader_top]
    })

    // Master section

    var dripFader = new Interface.Slider({
      bounds:[0.7,fader_top_master,0.1,1 - fader_top_master],
      onvaluechange: function() {
        Interface.OSC.send( '/speaker', 'sf', ['drip', this.value] )
      },
      target:null,
      label:'drip'
    })

    var subFader = new Interface.Slider({
      bounds:[0.8,fader_top_master,0.1,1 - fader_top_master],
      onvaluechange: function() {
        Interface.OSC.send( '/speaker', 'sf', ['subwoofer', this.value] )
      },
      target:null,
      label:'sub'
    })

    // XXX TODO: 'reset' to unity gain
    var masterFader = new Interface.Slider({
      bounds:[0.9,fader_top_master,0.1,1 - fader_top_master],
      onvaluechange: function() {
        Interface.OSC.send( '/speaker', 'sf', ['master', this.value] )
      },
      target:null,
      label:'master'
    })

    // Drip controls

    var rotationFader = new Interface.Crossfader({
      bounds:[.02,.05,.35,.15],
      min:-1, max:1,
      crossfaderWidth:30,
      onvaluechange: function() {
        Interface.OSC.send( '/drip', 'sf', ['rotation', this.value] )
      },
      target:null,
      label:'rotation'
    });

    var masterDelay = new Interface.Slider({
      bounds:[.4,.05,.25,.15],
      onvaluechange: function() {
        Interface.OSC.send( '/drip', 'sf', ['delay', this.value] )
      },
      isVertical:false,
      target:null,
      label:'delay'
    })

    var delayDispersion = new Interface.Slider({
      bounds:[.7,.05,.25,.15],
      onvaluechange: function() {
        Interface.OSC.send( '/drip', 'sf', ['dispersion', this.value] )
      },
      isVertical:false,
      target:null,
      label:'dispersion'
    })

    var rSlew0 = new Interface.Button({
      bounds:[.02,.25,.05,.08],
      mode:'toggle',
      onvaluechange: function() {
        Interface.OSC.send( '/drip', 'sf', ['slew_r', 0] )
      },
      target:null,
      label:'short'
    });

    var rSlew1 = new Interface.Button({
      bounds:[.07,.25,.05,.08],
      mode:'toggle',
      onvaluechange: function() {
        Interface.OSC.send( '/drip', 'sf', ['slew_r', 1] )
      },
      target:null,
      label:'med'
    });

    var rSlew2 = new Interface.Button({
      bounds:[.12,.25,.05,.08],
      mode:'toggle',
      onvaluechange: function() {
        Interface.OSC.send( '/drip', 'sf', ['slew_r', 2] )
      },
      target:null,
      label:'long'
    });

    var dSlew0 = new Interface.Button({
      bounds:[.2,.25,.05,.08],
      mode:'toggle',
      onvaluechange: function() {
        Interface.OSC.send( '/drip', 'sf', ['slew_d', 0] )
      },
      target:null,
      label:'short'
    });

    var dSlew1 = new Interface.Button({
      bounds:[.25,.25,.05,.08],
      mode:'toggle',
      onvaluechange: function() {
        Interface.OSC.send( '/drip', 'sf', ['slew_d', 1] )
      },
      target:null,
      label:'med'
    });

    var dSlew2 = new Interface.Button({
      bounds:[.3,.25,.05,.08],
      mode:'toggle',
      onvaluechange: function() {
        Interface.OSC.send( '/drip', 'sf', ['slew_d', 2] )
      },
      target:null,
      label:'long'
    });

    var rollDice = new Interface.Button({
      bounds:[.4,.25,.08,.1],
      mode:'contact',
      onvaluechange: function() {
        Interface.OSC.send( '/drip', 'sf', ['rolldice', this.value] )
      },
      target:null,
      label:'roll dice'
    });

    var clearDelay = new Interface.Button({
      bounds:[.5,.25,.08,.1],
      mode:'contact',
      onvaluechange: function() {
        Interface.OSC.send( '/drip', 'sf', ['clear', this.value] )
      },
      target:null,
      label:'clear'
    });

    panel.add( f1, f2, f3, f4, f5, f6 );
    panel.add( l1, l2, l3, l4, l5, l6 );
    panel.add( dripFader, subFader, masterFader);
    panel.add( rotationFader, masterDelay, delayDispersion, rollDice, clearDelay );
    panel.add( rSlew0, rSlew1, rSlew2, dSlew0, dSlew1, dSlew2 );

    panel.background = 'black';

    // override to process OSC messages. By default, if a message is received with the
    // same address as the key of one of the widgets (here /button and /slider) the value
    // of that widget will be set using the parameters of the received OSC message.

    Interface.OSC.receive = function( address, typetags, parameters ) {
      var name = address.split("/")[1];
      for( var j = 0; j < Interface.panels[0].children.length; j++) {
        var child = Interface.panels[0].children[j];
        cname = child.name.split("_");

        if(name == "say_levels" && cname[0] == "say"){
          //     console.log(name,cname,parameters);
          var value = parameters[cname[1]-1];
          // if (value == 0) {value = -200;}
          child.setValue(value);
        }
      }
      console.log( address, typetags, parameters )
    }

  </script>
</body>
</html>
