<html>
<head>
  <script src='interface.js'></script>
</head>
<body>
  <div id='patchbayPanel' class='interfacePanel' height="150">
  </div>

  <script>
    // The Interface.js simple server outputs all OSC messages to port 8082. See the README for more information.
    
    // You can manually send OSC messages with the following syntax:
    // Interface.OSC.send('/test', 'fs', [5.7, 'testing']);
    
    panel = new Interface.Panel({ useRelativeSizesAndPositions: true });
 
    var e = new Interface.Patchbay({ 
      name:"matrix",
  bounds:[0,0,1,.25],
  points:[ 
    {name:0, name2:'matt'},{name:1, name2:'hafiz'},{name:2, name2:'tim'},{name:3, name2:'anis'}, 
    {name:4, name2:'fernando'},{ name:5,name2:'hannah'},{name:6, name2:'karl'}
  ],
  onconnection: function( start, end ) {
  },
  ondisconnection: function( start, end ) {
  },
});


panel.add(e);

   
    // send a message to the address '/button'
    a1 = new Interface.Button({ bounds:[0,.25,.12,.25],   mode:'contact', name:'top_0', label:'forward ring',
      onvaluechange:function(){ Interface.OSC.send('/test', 'f', [0]); }  })
    a2 = new Interface.Button({ bounds:[.12,.25,.12,.25], mode:'contact', name:'top_1', label:'forward ring',
      onvaluechange:function(){ Interface.OSC.send('/test', 'f', [1]); }  })
    a3 = new Interface.Button({ bounds:[.25,.25,.12,.25], mode:'contact', name:'top_2', label:'4+3',
      onvaluechange:function(){ Interface.OSC.send('/test', 'f', [2]); }  })
    a4 = new Interface.Button({ bounds:[.37,.25,.12,.25], mode:'contact', name:'top_3', label:'2+2+3',
      onvaluechange:function(){ Interface.OSC.send('/test', 'f', [3]); }  })
    a5 = new Interface.Button({ bounds:[.5,.25,.12,.25],  mode:'contact', name:'top_4', label:'bidirectional ring',
      onvaluechange:function(){ Interface.OSC.send('/test', 'f', [4]); }  })
    a6 = new Interface.Button({ bounds:[.62,.25,.12,.25], mode:'contact', name:'top_5', label:'3+2+2',
      onvaluechange:function(){ Interface.OSC.send('/test', 'f', [5]); }  })
    a7 = new Interface.Button({ bounds:[.75,.25,.12,.25], mode:'contact', name:'top_6', label:'3+4',
      onvaluechange:function(){ Interface.OSC.send('/test', 'f', [6]); }  })
    a8 = new Interface.Button({ bounds:[.87,.25,.12,.25], mode:'contact', name:'top_7', label:'backward ring',
      onvaluechange:function(){ Interface.OSC.send('/test', 'f', [7]); }  })
    
    
panel.add(a1,a2,a3,a4,a5,a6,a7,a8);

h0 = new Interface.Slider({ min:"-200", max:"200", bounds:[.00,.5,.05,.5], fill:'red',   name:"hear_0" });
s0 = new Interface.Slider({ min:"-200", max:"200", bounds:[.05,.5,.05,.5], fill:'green', name:"say_0" });
h1 = new Interface.Slider({ min:"-200", max:"200", bounds:[.15,.5,.05,.5], fill:'red',   name:"hear_1" });
s1 = new Interface.Slider({ min:"-200", max:"200", bounds:[.20,.5,.05,.5], fill:'green', name:"say_1" });
h2 = new Interface.Slider({ min:"-200", max:"200", bounds:[.30,.5,.05,.5], fill:'red',   name:"hear_2" });
s2 = new Interface.Slider({ min:"-200", max:"200", bounds:[.35,.5,.05,.5], fill:'green', name:"say_2" });
h3 = new Interface.Slider({ min:"-200", max:"200", bounds:[.45,.5,.05,.5], fill:'red',   name:"hear_3" });
s3 = new Interface.Slider({ min:"-200", max:"200", bounds:[.50,.5,.05,.5], fill:'green', name:"say_3" });
h4 = new Interface.Slider({ min:"-200", max:"200", bounds:[.60,.5,.05,.5], fill:'red',   name:"hear_4" });
s4 = new Interface.Slider({ min:"-200", max:"200", bounds:[.65,.5,.05,.5], fill:'green', name:"say_4" });
h5 = new Interface.Slider({ min:"-200", max:"200", bounds:[.75,.5,.05,.5], fill:'red',   name:"hear_5" });
s5 = new Interface.Slider({ min:"-200", max:"200", bounds:[.80,.5,.05,.5], fill:'green', name:"say_5" });
h6 = new Interface.Slider({ min:"-200", max:"200", bounds:[.90,.5,.05,.5], fill:'red',   name:"hear_6" });
s6 = new Interface.Slider({ min:"-200", max:"200", bounds:[.95,.5,.05,.5], fill:'green', name:"say_6" });



panel.background = "black";
panel.add(h0,h1,h2,h3,h4,h5,h6,s0,s1,s2,s3,s4,s5,s6);

//to change topologies
//  /topology 0  (number represents topology change)


    // override to process OSC messages. By default, if a message is received with the
    // same address as the key of one of the widgets (here /button and /slider) the value
    // of that widget will be set using the parameters of the received OSC message.
    
    Interface.OSC.receive = function( address, typetags, parameters ) {
      var name = address.split("/")[1];
      for( var j = 0; j < Interface.panels[0].children.length; j++) {
        var child = Interface.panels[0].children[j];
        cname = child.name.split("_");
        if(name == "verbose_matrix" && cname[0] == "matrix"){
          child.connections = [];
          for( var m = 0; m < parameters.length; m += 3) {
            if (parameters[m] < 7 && parameters[m+1] < 7){
              console.log(parameters[m], parameters[m+1], parameters[m+2]);
              if (parameters[m+2] > 0){
                child.createConnection([parameters[m],parameters[m+1]]);
              }
            }
          }
          child.draw();
        }
        if(name == "say_levels" && cname[0] == "say"){
          //     console.log(name,cname,parameters);
          var value = parameters[cname[1]];
          if (value == 0) {value = -200;}
          child.setValue(value);
        }
        if(name == "hear_levels" && cname[0] == "hear"){
          var value = parameters[cname[1]];
          if (value == 0) {value = -200;}
    //      console.log(name,cname,parameters);
          child.setValue(value);
        }
      }
    
      console.log( address, typetags, parameters )
    }
  </script>
</body>
</html>
